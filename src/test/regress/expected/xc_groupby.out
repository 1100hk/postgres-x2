-- this file contains tests for GROUP BY with combinations of following
-- 1. enable_hashagg = on/off (to force the grouping by sorting)
-- 2. distributed or replicated tables across the datanodes
-- If a testcase is added to any of the combinations, please check if it's
-- applicable in other combinations as well.
-- Combination 1: enable_hashagg on and distributed tables
set enable_hashagg to on;
-- create required tables and fill them with data
create table xc_groupby_tab1 (val int, val2 int);
create table xc_groupby_tab2 (val int, val2 int);
insert into xc_groupby_tab1 values (1, 1), (2, 1), (3, 1), (2, 2), (6, 2), (4, 3), (1, 3), (6, 3);
insert into xc_groupby_tab2 values (1, 1), (4, 1), (8, 1), (2, 4), (9, 4), (3, 4), (4, 2), (5, 2), (3, 2);
select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_groupby_tab1 group by val2;
 count | sum |        avg         |     ?column?     | val2 
-------+-----+--------------------+------------------+------
     3 |   6 | 2.0000000000000000 |                2 |    1
     2 |   8 | 4.0000000000000000 |                4 |    2
     3 |  11 | 3.6666666666666667 | 3.66666666666667 |    3
(3 rows)

explain verbose select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_groupby_tab1 group by val2;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 HashAggregate  (cost=1.03..1.05 rows=1 width=8)
   Output: count(*), sum(val), avg(val), ((sum(val))::double precision / (count(*))::double precision), val2
   ->  Materialize  (cost=0.00..1.01 rows=1 width=8)
         Output: val, val2
         ->  Data Node Scan (Node Count [2])  (cost=0.00..1.01 rows=1000 width=8)
               Output: val, val2
(6 rows)

-- joins and group by
select count(*), sum(xc_groupby_tab1.val * xc_groupby_tab2.val), avg(xc_groupby_tab1.val*xc_groupby_tab2.val), sum(xc_groupby_tab1.val*xc_groupby_tab2.val)::float8/count(*), xc_groupby_tab1.val2, xc_groupby_tab2.val2 from xc_groupby_tab1 full outer join xc_groupby_tab2 on xc_groupby_tab1.val2 = xc_groupby_tab2.val2 group by xc_groupby_tab1.val2, xc_groupby_tab2.val2;
 count | sum |         avg         |     ?column?     | val2 | val2 
-------+-----+---------------------+------------------+------+------
     6 |  96 | 16.0000000000000000 |               16 |    2 |    2
     9 |  78 |  8.6666666666666667 | 8.66666666666667 |    1 |    1
     3 |     |                     |                  |    3 |     
     3 |     |                     |                  |      |    4
(4 rows)

explain verbose select count(*), sum(xc_groupby_tab1.val * xc_groupby_tab2.val), avg(xc_groupby_tab1.val*xc_groupby_tab2.val), sum(xc_groupby_tab1.val*xc_groupby_tab2.val)::float8/count(*), xc_groupby_tab1.val2, xc_groupby_tab2.val2 from xc_groupby_tab1 full outer join xc_groupby_tab2 on xc_groupby_tab1.val2 = xc_groupby_tab2.val2 group by xc_groupby_tab1.val2, xc_groupby_tab2.val2;
                                                                                                                                QUERY PLAN                                                                                                                                 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate  (cost=2.08..2.10 rows=1 width=16)
   Output: count(*), sum((xc_groupby_tab1.val * xc_groupby_tab2.val)), avg((xc_groupby_tab1.val * xc_groupby_tab2.val)), ((sum((xc_groupby_tab1.val * xc_groupby_tab2.val)))::double precision / (count(*))::double precision), xc_groupby_tab1.val2, xc_groupby_tab2.val2
   ->  Hash Full Join  (cost=1.03..2.06 rows=1 width=16)
         Output: xc_groupby_tab1.val, xc_groupby_tab1.val2, xc_groupby_tab2.val, xc_groupby_tab2.val2
         Hash Cond: (xc_groupby_tab1.val2 = xc_groupby_tab2.val2)
         ->  Materialize  (cost=0.00..1.01 rows=1 width=8)
               Output: xc_groupby_tab1.val, xc_groupby_tab1.val2
               ->  Data Node Scan (Node Count [2]) on xc_groupby_tab1  (cost=0.00..1.01 rows=1000 width=8)
                     Output: xc_groupby_tab1.val, xc_groupby_tab1.val2
         ->  Hash  (cost=1.01..1.01 rows=1 width=8)
               Output: xc_groupby_tab2.val, xc_groupby_tab2.val2
               ->  Materialize  (cost=0.00..1.01 rows=1 width=8)
                     Output: xc_groupby_tab2.val, xc_groupby_tab2.val2
                     ->  Data Node Scan (Node Count [2]) on xc_groupby_tab2  (cost=0.00..1.01 rows=1000 width=8)
                           Output: xc_groupby_tab2.val, xc_groupby_tab2.val2
(15 rows)

-- aggregates over aggregates
select sum(y) from (select sum(val) y, val2%2 x from xc_groupby_tab1 group by val2) q1 group by x;
 sum 
-----
   8
  17
(2 rows)

explain verbose select sum(y) from (select sum(val) y, val2%2 x from xc_groupby_tab1 group by val2) q1 group by x;
                                                   QUERY PLAN                                                   
----------------------------------------------------------------------------------------------------------------
 HashAggregate  (cost=1.05..1.06 rows=1 width=12)
   Output: sum((pg_catalog.sum((sum(xc_groupby_tab1.val))))), ((xc_groupby_tab1.val2 % 2))
   ->  HashAggregate  (cost=1.02..1.03 rows=1 width=8)
         Output: pg_catalog.sum((sum(xc_groupby_tab1.val))), ((xc_groupby_tab1.val2 % 2)), xc_groupby_tab1.val2
         ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
               Output: (sum(xc_groupby_tab1.val)), ((xc_groupby_tab1.val2 % 2)), xc_groupby_tab1.val2
               ->  Data Node Scan (Node Count [2])  (cost=0.00..1.01 rows=1000 width=8)
                     Output: sum(xc_groupby_tab1.val), (xc_groupby_tab1.val2 % 2), xc_groupby_tab1.val2
(8 rows)

-- group by without aggregate
select val2 from xc_groupby_tab1 group by val2;
 val2 
------
    1
    2
    3
(3 rows)

explain verbose select val2 from xc_groupby_tab1 group by val2;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 HashAggregate  (cost=1.02..1.03 rows=1 width=4)
   Output: xc_groupby_tab1.val2
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: xc_groupby_tab1.val2
         ->  Data Node Scan (Node Count [2])  (cost=0.00..1.01 rows=1000 width=4)
               Output: xc_groupby_tab1.val2
(6 rows)

select val + val2 from xc_groupby_tab1 group by val + val2;
 ?column? 
----------
        4
        7
        3
        8
        9
        2
(6 rows)

explain verbose select val + val2 from xc_groupby_tab1 group by val + val2;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 HashAggregate  (cost=1.02..1.03 rows=1 width=8)
   Output: ((xc_groupby_tab1.val + xc_groupby_tab1.val2))
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: ((xc_groupby_tab1.val + xc_groupby_tab1.val2))
         ->  Data Node Scan (Node Count [2])  (cost=0.00..1.01 rows=1000 width=8)
               Output: (xc_groupby_tab1.val + xc_groupby_tab1.val2)
(6 rows)

select val + val2, val, val2 from xc_groupby_tab1 group by val, val2;
 ?column? | val | val2 
----------+-----+------
        7 |   4 |    3
        4 |   3 |    1
        4 |   1 |    3
        4 |   2 |    2
        3 |   2 |    1
        2 |   1 |    1
        8 |   6 |    2
        9 |   6 |    3
(8 rows)

explain verbose select val + val2, val, val2 from xc_groupby_tab1 group by val, val2;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 HashAggregate  (cost=1.02..1.03 rows=1 width=8)
   Output: ((xc_groupby_tab1.val + xc_groupby_tab1.val2)), xc_groupby_tab1.val, xc_groupby_tab1.val2
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: ((xc_groupby_tab1.val + xc_groupby_tab1.val2)), xc_groupby_tab1.val, xc_groupby_tab1.val2
         ->  Data Node Scan (Node Count [2])  (cost=0.00..1.01 rows=1000 width=8)
               Output: (xc_groupby_tab1.val + xc_groupby_tab1.val2), xc_groupby_tab1.val, xc_groupby_tab1.val2
(6 rows)

select xc_groupby_tab1.val + xc_groupby_tab2.val2, xc_groupby_tab1.val, xc_groupby_tab2.val2 from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val, xc_groupby_tab2.val2;
 ?column? | val | val2 
----------+-----+------
        5 |   3 |    2
        5 |   4 |    1
        6 |   4 |    2
        6 |   2 |    4
        2 |   1 |    1
        7 |   3 |    4
(6 rows)

explain verbose select xc_groupby_tab1.val + xc_groupby_tab2.val2, xc_groupby_tab1.val, xc_groupby_tab2.val2 from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val, xc_groupby_tab2.val2;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 HashAggregate  (cost=0.00..0.01 rows=1 width=0)
   Output: ((xc_groupby_tab1.val + xc_groupby_tab2.val2)), xc_groupby_tab1.val, xc_groupby_tab2.val2
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: ((xc_groupby_tab1.val + xc_groupby_tab2.val2)), xc_groupby_tab1.val, xc_groupby_tab2.val2
         ->  Data Node Scan (Node Count [2])  (cost=0.00..1.01 rows=1 width=4)
               Output: (xc_groupby_tab1.val + xc_groupby_tab2.val2), xc_groupby_tab1.val, xc_groupby_tab2.val2
(6 rows)

select xc_groupby_tab1.val + xc_groupby_tab2.val2 from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val + xc_groupby_tab2.val2;
 ?column? 
----------
        6
        2
        7
        5
(4 rows)

explain verbose select xc_groupby_tab1.val + xc_groupby_tab2.val2 from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val + xc_groupby_tab2.val2;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 HashAggregate  (cost=0.00..0.01 rows=1 width=0)
   Output: ((xc_groupby_tab1.val + xc_groupby_tab2.val2))
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: ((xc_groupby_tab1.val + xc_groupby_tab2.val2))
         ->  Data Node Scan (Node Count [2])  (cost=0.00..1.01 rows=1 width=4)
               Output: (xc_groupby_tab1.val + xc_groupby_tab2.val2)
(6 rows)

-- group by with aggregates in expression
select count(*) + sum(val) + avg(val), val2 from xc_groupby_tab1 group by val2;
      ?column?       | val2 
---------------------+------
 11.0000000000000000 |    1
 14.0000000000000000 |    2
 17.6666666666666667 |    3
(3 rows)

explain verbose select count(*) + sum(val) + avg(val), val2 from xc_groupby_tab1 group by val2;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 HashAggregate  (cost=1.02..1.04 rows=1 width=8)
   Output: (((count(*) + sum(val)))::numeric + avg(val)), val2
   ->  Materialize  (cost=0.00..1.01 rows=1 width=8)
         Output: val, val2
         ->  Data Node Scan (Node Count [2])  (cost=0.00..1.01 rows=1000 width=8)
               Output: val, val2
(6 rows)

-- group by with expressions in group by clause
select sum(val), avg(val), 2 * val2 from xc_groupby_tab1 group by 2 * val2;
 sum |        avg         | ?column? 
-----+--------------------+----------
  11 | 3.6666666666666667 |        6
   6 | 2.0000000000000000 |        2
   8 | 4.0000000000000000 |        4
(3 rows)

explain verbose select sum(val), avg(val), 2 * val2 from xc_groupby_tab1 group by 2 * val2;
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 HashAggregate  (cost=1.02..1.04 rows=1 width=8)
   Output: pg_catalog.sum((sum(xc_groupby_tab1.val))), pg_catalog.avg((avg(xc_groupby_tab1.val))), ((2 * xc_groupby_tab1.val2))
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: (sum(xc_groupby_tab1.val)), (avg(xc_groupby_tab1.val)), ((2 * xc_groupby_tab1.val2))
         ->  Data Node Scan (Node Count [2])  (cost=0.00..1.01 rows=1000 width=8)
               Output: sum(xc_groupby_tab1.val), avg(xc_groupby_tab1.val), (2 * xc_groupby_tab1.val2)
(6 rows)

drop table xc_groupby_tab1;
drop table xc_groupby_tab2;
-- some tests involving nulls, characters, float type etc.
create table xc_groupby_def(a int, b varchar(25)); 
insert into xc_groupby_def VALUES (NULL, NULL);
insert into xc_groupby_def VALUES (1, NULL);
insert into xc_groupby_def VALUES (NULL, 'One');
insert into xc_groupby_def VALUES (2, 'Two');
insert into xc_groupby_def VALUES (2, 'Two');
insert into xc_groupby_def VALUES (3, 'Three');
insert into xc_groupby_def VALUES (4, 'Three');
insert into xc_groupby_def VALUES (5, 'Three');
insert into xc_groupby_def VALUES (6, 'Two');
insert into xc_groupby_def VALUES (7, NULL);
insert into xc_groupby_def VALUES (8, 'Two');
insert into xc_groupby_def VALUES (9, 'Three');
insert into xc_groupby_def VALUES (10, 'Three');
select a,count(a) from xc_groupby_def group by a order by a;
 a  | count 
----+-------
  1 |     1
  2 |     2
  3 |     1
  4 |     1
  5 |     1
  6 |     1
  7 |     1
  8 |     1
  9 |     1
 10 |     1
    |     0
(11 rows)

explain verbose select a,count(a) from xc_groupby_def group by a order by a;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 GroupAggregate  (cost=1.02..1.04 rows=1 width=4)
   Output: a, count(a)
   ->  Sort  (cost=1.02..1.03 rows=1 width=4)
         Output: a
         Sort Key: xc_groupby_def.a
         ->  Result  (cost=0.00..1.01 rows=1 width=4)
               Output: a
               ->  Materialize  (cost=0.00..1.01 rows=1 width=4)
                     Output: a, b
                     ->  Data Node Scan (Node Count [2])  (cost=0.00..1.01 rows=1000 width=4)
                           Output: a, b
(11 rows)

select avg(a) from xc_groupby_def group by a; 
          avg           
------------------------
                       
     6.0000000000000000
     8.0000000000000000
     5.0000000000000000
     2.0000000000000000
 1.00000000000000000000
     9.0000000000000000
     3.0000000000000000
    10.0000000000000000
     7.0000000000000000
     4.0000000000000000
(11 rows)

select avg(a) from xc_groupby_def group by a;
          avg           
------------------------
                       
     6.0000000000000000
     8.0000000000000000
     5.0000000000000000
 1.00000000000000000000
     9.0000000000000000
     2.0000000000000000
    10.0000000000000000
     7.0000000000000000
     3.0000000000000000
     4.0000000000000000
(11 rows)

explain verbose select avg(a) from xc_groupby_def group by a;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 HashAggregate  (cost=1.02..1.03 rows=1 width=4)
   Output: pg_catalog.avg((avg(xc_groupby_def.a))), xc_groupby_def.a
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: (avg(xc_groupby_def.a)), xc_groupby_def.a
         ->  Data Node Scan (Node Count [2])  (cost=0.00..1.01 rows=1000 width=4)
               Output: avg(xc_groupby_def.a), xc_groupby_def.a
(6 rows)

select avg(a) from xc_groupby_def group by b;
        avg         
--------------------
 4.0000000000000000
                   
 4.5000000000000000
 6.2000000000000000
(4 rows)

explain verbose select avg(a) from xc_groupby_def group by b;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 HashAggregate  (cost=1.02..1.03 rows=1 width=72)
   Output: pg_catalog.avg((avg(xc_groupby_def.a))), xc_groupby_def.b
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: (avg(xc_groupby_def.a)), xc_groupby_def.b
         ->  Data Node Scan (Node Count [2])  (cost=0.00..1.01 rows=1000 width=72)
               Output: avg(xc_groupby_def.a), xc_groupby_def.b
(6 rows)

select sum(a) from xc_groupby_def group by b;
 sum 
-----
   8
    
  18
  31
(4 rows)

explain verbose select sum(a) from xc_groupby_def group by b;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 HashAggregate  (cost=1.02..1.03 rows=1 width=72)
   Output: pg_catalog.sum((sum(xc_groupby_def.a))), xc_groupby_def.b
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: (sum(xc_groupby_def.a)), xc_groupby_def.b
         ->  Data Node Scan (Node Count [2])  (cost=0.00..1.01 rows=1000 width=72)
               Output: sum(xc_groupby_def.a), xc_groupby_def.b
(6 rows)

select count(*) from xc_groupby_def group by b;
 count 
-------
     3
     1
     4
     5
(4 rows)

explain verbose select count(*) from xc_groupby_def group by b;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 HashAggregate  (cost=1.02..1.03 rows=1 width=68)
   Output: pg_catalog.count(*), xc_groupby_def.b
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: (count(*)), xc_groupby_def.b
         ->  Data Node Scan (Node Count [2])  (cost=0.00..1.01 rows=1000 width=68)
               Output: count(*), xc_groupby_def.b
(6 rows)

select count(*) from xc_groupby_def where a is not null group by a;
 count 
-------
     1
     1
     1
     1
     1
     1
     2
     1
     1
     1
(10 rows)

explain verbose select count(*) from xc_groupby_def where a is not null group by a;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 HashAggregate  (cost=1.02..1.03 rows=1 width=4)
   Output: pg_catalog.count(*), xc_groupby_def.a
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: (count(*)), xc_groupby_def.a
         ->  Data Node Scan (Node Count [2])  (cost=0.00..1.01 rows=1000 width=4)
               Output: count(*), xc_groupby_def.a
(6 rows)

select b from xc_groupby_def group by b;
   b   
-------
 
 One
 Two
 Three
(4 rows)

explain verbose select b from xc_groupby_def group by b;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 HashAggregate  (cost=1.02..1.03 rows=1 width=68)
   Output: xc_groupby_def.b
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: xc_groupby_def.b
         ->  Data Node Scan (Node Count [2])  (cost=0.00..1.01 rows=1000 width=68)
               Output: xc_groupby_def.b
(6 rows)

select b,count(b) from xc_groupby_def group by b;
   b   | count 
-------+-------
       |     0
 One   |     1
 Two   |     4
 Three |     5
(4 rows)

explain verbose select b,count(b) from xc_groupby_def group by b;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 HashAggregate  (cost=1.02..1.03 rows=1 width=68)
   Output: xc_groupby_def.b, count((count(xc_groupby_def.b)))
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: xc_groupby_def.b, (count(xc_groupby_def.b))
         ->  Data Node Scan (Node Count [2])  (cost=0.00..1.01 rows=1000 width=68)
               Output: xc_groupby_def.b, count(xc_groupby_def.b)
(6 rows)

select count(*) from xc_groupby_def where b is null group by b;
 count 
-------
     3
(1 row)

explain verbose select count(*) from xc_groupby_def where b is null group by b;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 HashAggregate  (cost=1.02..1.03 rows=1 width=68)
   Output: pg_catalog.count(*), xc_groupby_def.b
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: (count(*)), xc_groupby_def.b
         ->  Data Node Scan (Node Count [2])  (cost=0.00..1.01 rows=1000 width=68)
               Output: count(*), xc_groupby_def.b
(6 rows)

create table xc_groupby_g(a int, b float, c numeric);
insert into xc_groupby_g values(1,2.1,3.2);
insert into xc_groupby_g values(1,2.1,3.2);
insert into xc_groupby_g values(2,2.3,5.2);
select sum(a) from xc_groupby_g group by a;
 sum 
-----
   2
   2
(2 rows)

explain verbose select sum(a) from xc_groupby_g group by a;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 HashAggregate  (cost=1.02..1.03 rows=1 width=4)
   Output: pg_catalog.sum((sum(xc_groupby_g.a))), xc_groupby_g.a
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: (sum(xc_groupby_g.a)), xc_groupby_g.a
         ->  Data Node Scan (Node Count [2])  (cost=0.00..1.01 rows=1000 width=4)
               Output: sum(xc_groupby_g.a), xc_groupby_g.a
(6 rows)

select sum(b) from xc_groupby_g group by b;
 sum 
-----
 2.3
 4.2
(2 rows)

explain verbose select sum(b) from xc_groupby_g group by b;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 HashAggregate  (cost=1.02..1.03 rows=1 width=8)
   Output: sum((sum(xc_groupby_g.b))), xc_groupby_g.b
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: (sum(xc_groupby_g.b)), xc_groupby_g.b
         ->  Data Node Scan (Node Count [2])  (cost=0.00..1.01 rows=1000 width=8)
               Output: sum(xc_groupby_g.b), xc_groupby_g.b
(6 rows)

select sum(c) from xc_groupby_g group by b;
 sum 
-----
 5.2
 6.4
(2 rows)

explain verbose select sum(c) from xc_groupby_g group by b;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 HashAggregate  (cost=1.02..1.03 rows=1 width=40)
   Output: sum((sum(xc_groupby_g.c))), xc_groupby_g.b
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: (sum(xc_groupby_g.c)), xc_groupby_g.b
         ->  Data Node Scan (Node Count [2])  (cost=0.00..1.01 rows=1000 width=40)
               Output: sum(xc_groupby_g.c), xc_groupby_g.b
(6 rows)

select avg(a) from xc_groupby_g group by b;
          avg           
------------------------
     2.0000000000000000
 1.00000000000000000000
(2 rows)

explain verbose select avg(a) from xc_groupby_g group by b;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 HashAggregate  (cost=1.02..1.03 rows=1 width=12)
   Output: pg_catalog.avg((avg(xc_groupby_g.a))), xc_groupby_g.b
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: (avg(xc_groupby_g.a)), xc_groupby_g.b
         ->  Data Node Scan (Node Count [2])  (cost=0.00..1.01 rows=1000 width=12)
               Output: avg(xc_groupby_g.a), xc_groupby_g.b
(6 rows)

select avg(b) from xc_groupby_g group by c;
 avg 
-----
 2.3
 2.1
(2 rows)

explain verbose select avg(b) from xc_groupby_g group by c;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 HashAggregate  (cost=1.02..1.03 rows=1 width=40)
   Output: pg_catalog.avg((avg(xc_groupby_g.b))), xc_groupby_g.c
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: (avg(xc_groupby_g.b)), xc_groupby_g.c
         ->  Data Node Scan (Node Count [2])  (cost=0.00..1.01 rows=1000 width=40)
               Output: avg(xc_groupby_g.b), xc_groupby_g.c
(6 rows)

select avg(c) from xc_groupby_g group by c;
        avg         
--------------------
 5.2000000000000000
 3.2000000000000000
(2 rows)

explain verbose select avg(c) from xc_groupby_g group by c;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 HashAggregate  (cost=1.02..1.03 rows=1 width=32)
   Output: pg_catalog.avg((avg(xc_groupby_g.c))), xc_groupby_g.c
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: (avg(xc_groupby_g.c)), xc_groupby_g.c
         ->  Data Node Scan (Node Count [2])  (cost=0.00..1.01 rows=1000 width=32)
               Output: avg(xc_groupby_g.c), xc_groupby_g.c
(6 rows)

drop table xc_groupby_def;
drop table xc_groupby_g;
-- Combination 2, enable_hashagg on and replicated tables.
-- repeat the same tests for replicated tables
-- create required tables and fill them with data
create table xc_groupby_tab1 (val int, val2 int) distribute by replication;
create table xc_groupby_tab2 (val int, val2 int) distribute by replication;
insert into xc_groupby_tab1 values (1, 1), (2, 1), (3, 1), (2, 2), (6, 2), (4, 3), (1, 3), (6, 3);
insert into xc_groupby_tab2 values (1, 1), (4, 1), (8, 1), (2, 4), (9, 4), (3, 4), (4, 2), (5, 2), (3, 2);
select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_groupby_tab1 group by val2;
 count | sum |        avg         |     ?column?     | val2 
-------+-----+--------------------+------------------+------
     3 |   6 | 2.0000000000000000 |                2 |    1
     2 |   8 | 4.0000000000000000 |                4 |    2
     3 |  11 | 3.6666666666666667 | 3.66666666666667 |    3
(3 rows)

explain verbose select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_groupby_tab1 group by val2;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 HashAggregate  (cost=1.03..1.05 rows=1 width=8)
   Output: count(*), sum(val), avg(val), ((sum(val))::double precision / (count(*))::double precision), val2
   ->  Materialize  (cost=0.00..1.01 rows=1 width=8)
         Output: val, val2
         ->  Data Node Scan (Node Count [1])  (cost=0.00..1.01 rows=1000 width=8)
               Output: val, val2
(6 rows)

-- joins and group by
select count(*), sum(xc_groupby_tab1.val * xc_groupby_tab2.val), avg(xc_groupby_tab1.val*xc_groupby_tab2.val), sum(xc_groupby_tab1.val*xc_groupby_tab2.val)::float8/count(*), xc_groupby_tab1.val2, xc_groupby_tab2.val2 from xc_groupby_tab1 full outer join xc_groupby_tab2 on xc_groupby_tab1.val2 = xc_groupby_tab2.val2 group by xc_groupby_tab1.val2, xc_groupby_tab2.val2;
 count | sum |         avg         |     ?column?     | val2 | val2 
-------+-----+---------------------+------------------+------+------
     6 |  96 | 16.0000000000000000 |               16 |    2 |    2
     9 |  78 |  8.6666666666666667 | 8.66666666666667 |    1 |    1
     3 |     |                     |                  |    3 |     
     3 |     |                     |                  |      |    4
(4 rows)

explain verbose select count(*), sum(xc_groupby_tab1.val * xc_groupby_tab2.val), avg(xc_groupby_tab1.val*xc_groupby_tab2.val), sum(xc_groupby_tab1.val*xc_groupby_tab2.val)::float8/count(*), xc_groupby_tab1.val2, xc_groupby_tab2.val2 from xc_groupby_tab1 full outer join xc_groupby_tab2 on xc_groupby_tab1.val2 = xc_groupby_tab2.val2 group by xc_groupby_tab1.val2, xc_groupby_tab2.val2;
                                                                                                                                QUERY PLAN                                                                                                                                 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 HashAggregate  (cost=2.08..2.10 rows=1 width=16)
   Output: count(*), sum((xc_groupby_tab1.val * xc_groupby_tab2.val)), avg((xc_groupby_tab1.val * xc_groupby_tab2.val)), ((sum((xc_groupby_tab1.val * xc_groupby_tab2.val)))::double precision / (count(*))::double precision), xc_groupby_tab1.val2, xc_groupby_tab2.val2
   ->  Hash Full Join  (cost=1.03..2.06 rows=1 width=16)
         Output: xc_groupby_tab1.val, xc_groupby_tab1.val2, xc_groupby_tab2.val, xc_groupby_tab2.val2
         Hash Cond: (xc_groupby_tab1.val2 = xc_groupby_tab2.val2)
         ->  Materialize  (cost=0.00..1.01 rows=1 width=8)
               Output: xc_groupby_tab1.val, xc_groupby_tab1.val2
               ->  Data Node Scan (Node Count [1]) on xc_groupby_tab1  (cost=0.00..1.01 rows=1000 width=8)
                     Output: xc_groupby_tab1.val, xc_groupby_tab1.val2
         ->  Hash  (cost=1.01..1.01 rows=1 width=8)
               Output: xc_groupby_tab2.val, xc_groupby_tab2.val2
               ->  Materialize  (cost=0.00..1.01 rows=1 width=8)
                     Output: xc_groupby_tab2.val, xc_groupby_tab2.val2
                     ->  Data Node Scan (Node Count [1]) on xc_groupby_tab2  (cost=0.00..1.01 rows=1000 width=8)
                           Output: xc_groupby_tab2.val, xc_groupby_tab2.val2
(15 rows)

-- aggregates over aggregates
select sum(y) from (select sum(val) y, val2%2 x from xc_groupby_tab1 group by val2) q1 group by x;
 sum 
-----
   8
  17
(2 rows)

explain verbose select sum(y) from (select sum(val) y, val2%2 x from xc_groupby_tab1 group by val2) q1 group by x;
                                                   QUERY PLAN                                                   
----------------------------------------------------------------------------------------------------------------
 HashAggregate  (cost=1.05..1.06 rows=1 width=12)
   Output: sum((pg_catalog.sum((sum(xc_groupby_tab1.val))))), ((xc_groupby_tab1.val2 % 2))
   ->  HashAggregate  (cost=1.02..1.03 rows=1 width=8)
         Output: pg_catalog.sum((sum(xc_groupby_tab1.val))), ((xc_groupby_tab1.val2 % 2)), xc_groupby_tab1.val2
         ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
               Output: (sum(xc_groupby_tab1.val)), ((xc_groupby_tab1.val2 % 2)), xc_groupby_tab1.val2
               ->  Data Node Scan (Node Count [1])  (cost=0.00..1.01 rows=1000 width=8)
                     Output: sum(xc_groupby_tab1.val), (xc_groupby_tab1.val2 % 2), xc_groupby_tab1.val2
(8 rows)

-- group by without aggregate
select val2 from xc_groupby_tab1 group by val2;
 val2 
------
    1
    2
    3
(3 rows)

explain verbose select val2 from xc_groupby_tab1 group by val2;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 HashAggregate  (cost=1.02..1.03 rows=1 width=4)
   Output: xc_groupby_tab1.val2
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: xc_groupby_tab1.val2
         ->  Data Node Scan (Node Count [1])  (cost=0.00..1.01 rows=1000 width=4)
               Output: xc_groupby_tab1.val2
(6 rows)

select val + val2 from xc_groupby_tab1 group by val + val2;
 ?column? 
----------
        4
        3
        7
        8
        9
        2
(6 rows)

explain verbose select val + val2 from xc_groupby_tab1 group by val + val2;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 HashAggregate  (cost=1.02..1.03 rows=1 width=8)
   Output: ((xc_groupby_tab1.val + xc_groupby_tab1.val2))
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: ((xc_groupby_tab1.val + xc_groupby_tab1.val2))
         ->  Data Node Scan (Node Count [1])  (cost=0.00..1.01 rows=1000 width=8)
               Output: (xc_groupby_tab1.val + xc_groupby_tab1.val2)
(6 rows)

select val + val2, val, val2 from xc_groupby_tab1 group by val, val2;
 ?column? | val | val2 
----------+-----+------
        7 |   4 |    3
        4 |   3 |    1
        4 |   2 |    2
        4 |   1 |    3
        3 |   2 |    1
        2 |   1 |    1
        8 |   6 |    2
        9 |   6 |    3
(8 rows)

explain verbose select val + val2, val, val2 from xc_groupby_tab1 group by val, val2;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 HashAggregate  (cost=1.02..1.03 rows=1 width=8)
   Output: ((xc_groupby_tab1.val + xc_groupby_tab1.val2)), xc_groupby_tab1.val, xc_groupby_tab1.val2
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: ((xc_groupby_tab1.val + xc_groupby_tab1.val2)), xc_groupby_tab1.val, xc_groupby_tab1.val2
         ->  Data Node Scan (Node Count [1])  (cost=0.00..1.01 rows=1000 width=8)
               Output: (xc_groupby_tab1.val + xc_groupby_tab1.val2), xc_groupby_tab1.val, xc_groupby_tab1.val2
(6 rows)

select xc_groupby_tab1.val + xc_groupby_tab2.val2, xc_groupby_tab1.val, xc_groupby_tab2.val2 from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val, xc_groupby_tab2.val2;
 ?column? | val | val2 
----------+-----+------
        5 |   3 |    2
        5 |   4 |    1
        6 |   4 |    2
        2 |   1 |    1
        6 |   2 |    4
        7 |   3 |    4
(6 rows)

explain verbose select xc_groupby_tab1.val + xc_groupby_tab2.val2, xc_groupby_tab1.val, xc_groupby_tab2.val2 from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val, xc_groupby_tab2.val2;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 HashAggregate  (cost=0.00..0.01 rows=1 width=0)
   Output: ((xc_groupby_tab1.val + xc_groupby_tab2.val2)), xc_groupby_tab1.val, xc_groupby_tab2.val2
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: ((xc_groupby_tab1.val + xc_groupby_tab2.val2)), xc_groupby_tab1.val, xc_groupby_tab2.val2
         ->  Data Node Scan (Node Count [1])  (cost=0.00..1.01 rows=1 width=4)
               Output: (xc_groupby_tab1.val + xc_groupby_tab2.val2), xc_groupby_tab1.val, xc_groupby_tab2.val2
(6 rows)

select xc_groupby_tab1.val + xc_groupby_tab2.val2 from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val + xc_groupby_tab2.val2;
 ?column? 
----------
        6
        2
        7
        5
(4 rows)

explain verbose select xc_groupby_tab1.val + xc_groupby_tab2.val2 from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val + xc_groupby_tab2.val2;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 HashAggregate  (cost=0.00..0.01 rows=1 width=0)
   Output: ((xc_groupby_tab1.val + xc_groupby_tab2.val2))
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: ((xc_groupby_tab1.val + xc_groupby_tab2.val2))
         ->  Data Node Scan (Node Count [1])  (cost=0.00..1.01 rows=1 width=4)
               Output: (xc_groupby_tab1.val + xc_groupby_tab2.val2)
(6 rows)

-- group by with aggregates in expression
select count(*) + sum(val) + avg(val), val2 from xc_groupby_tab1 group by val2;
      ?column?       | val2 
---------------------+------
 11.0000000000000000 |    1
 14.0000000000000000 |    2
 17.6666666666666667 |    3
(3 rows)

explain verbose select count(*) + sum(val) + avg(val), val2 from xc_groupby_tab1 group by val2;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 HashAggregate  (cost=1.02..1.04 rows=1 width=8)
   Output: (((count(*) + sum(val)))::numeric + avg(val)), val2
   ->  Materialize  (cost=0.00..1.01 rows=1 width=8)
         Output: val, val2
         ->  Data Node Scan (Node Count [1])  (cost=0.00..1.01 rows=1000 width=8)
               Output: val, val2
(6 rows)

-- group by with expressions in group by clause
select sum(val), avg(val), 2 * val2 from xc_groupby_tab1 group by 2 * val2;
 sum |        avg         | ?column? 
-----+--------------------+----------
  11 | 3.6666666666666667 |        6
   6 | 2.0000000000000000 |        2
   8 | 4.0000000000000000 |        4
(3 rows)

explain verbose select sum(val), avg(val), 2 * val2 from xc_groupby_tab1 group by 2 * val2;
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 HashAggregate  (cost=1.02..1.04 rows=1 width=8)
   Output: pg_catalog.sum((sum(xc_groupby_tab1.val))), pg_catalog.avg((avg(xc_groupby_tab1.val))), ((2 * xc_groupby_tab1.val2))
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: (sum(xc_groupby_tab1.val)), (avg(xc_groupby_tab1.val)), ((2 * xc_groupby_tab1.val2))
         ->  Data Node Scan (Node Count [1])  (cost=0.00..1.01 rows=1000 width=8)
               Output: sum(xc_groupby_tab1.val), avg(xc_groupby_tab1.val), (2 * xc_groupby_tab1.val2)
(6 rows)

drop table xc_groupby_tab1;
drop table xc_groupby_tab2;
-- some tests involving nulls, characters, float type etc.
create table xc_groupby_def(a int, b varchar(25)) distribute by replication; 
insert into xc_groupby_def VALUES (NULL, NULL);
insert into xc_groupby_def VALUES (1, NULL);
insert into xc_groupby_def VALUES (NULL, 'One');
insert into xc_groupby_def VALUES (2, 'Two');
insert into xc_groupby_def VALUES (2, 'Two');
insert into xc_groupby_def VALUES (3, 'Three');
insert into xc_groupby_def VALUES (4, 'Three');
insert into xc_groupby_def VALUES (5, 'Three');
insert into xc_groupby_def VALUES (6, 'Two');
insert into xc_groupby_def VALUES (7, NULL);
insert into xc_groupby_def VALUES (8, 'Two');
insert into xc_groupby_def VALUES (9, 'Three');
insert into xc_groupby_def VALUES (10, 'Three');
select a,count(a) from xc_groupby_def group by a order by a;
 a  | count 
----+-------
  1 |     1
  2 |     2
  3 |     1
  4 |     1
  5 |     1
  6 |     1
  7 |     1
  8 |     1
  9 |     1
 10 |     1
    |     0
(11 rows)

explain verbose select a,count(a) from xc_groupby_def group by a order by a;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 GroupAggregate  (cost=1.02..1.04 rows=1 width=4)
   Output: a, count(a)
   ->  Sort  (cost=1.02..1.03 rows=1 width=4)
         Output: a
         Sort Key: xc_groupby_def.a
         ->  Result  (cost=0.00..1.01 rows=1 width=4)
               Output: a
               ->  Materialize  (cost=0.00..1.01 rows=1 width=4)
                     Output: a, b
                     ->  Data Node Scan (Node Count [1])  (cost=0.00..1.01 rows=1000 width=4)
                           Output: a, b
(11 rows)

select avg(a) from xc_groupby_def group by a; 
          avg           
------------------------
                       
     6.0000000000000000
     8.0000000000000000
     5.0000000000000000
 1.00000000000000000000
     9.0000000000000000
     2.0000000000000000
     3.0000000000000000
    10.0000000000000000
     7.0000000000000000
     4.0000000000000000
(11 rows)

explain verbose select avg(a) from xc_groupby_def group by a; 
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 HashAggregate  (cost=1.02..1.03 rows=1 width=4)
   Output: pg_catalog.avg((avg(xc_groupby_def.a))), xc_groupby_def.a
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: (avg(xc_groupby_def.a)), xc_groupby_def.a
         ->  Data Node Scan (Node Count [1])  (cost=0.00..1.01 rows=1000 width=4)
               Output: avg(xc_groupby_def.a), xc_groupby_def.a
(6 rows)

select avg(a) from xc_groupby_def group by a;
          avg           
------------------------
                       
     6.0000000000000000
     8.0000000000000000
     5.0000000000000000
 1.00000000000000000000
     9.0000000000000000
     2.0000000000000000
     3.0000000000000000
    10.0000000000000000
     7.0000000000000000
     4.0000000000000000
(11 rows)

explain verbose select avg(a) from xc_groupby_def group by a;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 HashAggregate  (cost=1.02..1.03 rows=1 width=4)
   Output: pg_catalog.avg((avg(xc_groupby_def.a))), xc_groupby_def.a
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: (avg(xc_groupby_def.a)), xc_groupby_def.a
         ->  Data Node Scan (Node Count [1])  (cost=0.00..1.01 rows=1000 width=4)
               Output: avg(xc_groupby_def.a), xc_groupby_def.a
(6 rows)

select avg(a) from xc_groupby_def group by b;
        avg         
--------------------
 4.0000000000000000
                   
 4.5000000000000000
 6.2000000000000000
(4 rows)

explain verbose select avg(a) from xc_groupby_def group by b;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 HashAggregate  (cost=1.02..1.03 rows=1 width=72)
   Output: pg_catalog.avg((avg(xc_groupby_def.a))), xc_groupby_def.b
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: (avg(xc_groupby_def.a)), xc_groupby_def.b
         ->  Data Node Scan (Node Count [1])  (cost=0.00..1.01 rows=1000 width=72)
               Output: avg(xc_groupby_def.a), xc_groupby_def.b
(6 rows)

select sum(a) from xc_groupby_def group by b;
 sum 
-----
   8
    
  18
  31
(4 rows)

explain verbose select sum(a) from xc_groupby_def group by b;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 HashAggregate  (cost=1.02..1.03 rows=1 width=72)
   Output: pg_catalog.sum((sum(xc_groupby_def.a))), xc_groupby_def.b
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: (sum(xc_groupby_def.a)), xc_groupby_def.b
         ->  Data Node Scan (Node Count [1])  (cost=0.00..1.01 rows=1000 width=72)
               Output: sum(xc_groupby_def.a), xc_groupby_def.b
(6 rows)

select count(*) from xc_groupby_def group by b;
 count 
-------
     3
     1
     4
     5
(4 rows)

explain verbose select count(*) from xc_groupby_def group by b;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 HashAggregate  (cost=1.02..1.03 rows=1 width=68)
   Output: pg_catalog.count(*), xc_groupby_def.b
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: (count(*)), xc_groupby_def.b
         ->  Data Node Scan (Node Count [1])  (cost=0.00..1.01 rows=1000 width=68)
               Output: count(*), xc_groupby_def.b
(6 rows)

select count(*) from xc_groupby_def where a is not null group by a;
 count 
-------
     1
     1
     1
     1
     1
     1
     2
     1
     1
     1
(10 rows)

explain verbose select count(*) from xc_groupby_def where a is not null group by a;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 HashAggregate  (cost=1.02..1.03 rows=1 width=4)
   Output: pg_catalog.count(*), xc_groupby_def.a
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: (count(*)), xc_groupby_def.a
         ->  Data Node Scan (Node Count [1])  (cost=0.00..1.01 rows=1000 width=4)
               Output: count(*), xc_groupby_def.a
(6 rows)

select b from xc_groupby_def group by b;
   b   
-------
 
 One
 Two
 Three
(4 rows)

explain verbose select b from xc_groupby_def group by b;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 HashAggregate  (cost=1.02..1.03 rows=1 width=68)
   Output: xc_groupby_def.b
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: xc_groupby_def.b
         ->  Data Node Scan (Node Count [1])  (cost=0.00..1.01 rows=1000 width=68)
               Output: xc_groupby_def.b
(6 rows)

select b,count(b) from xc_groupby_def group by b;
   b   | count 
-------+-------
       |     0
 One   |     1
 Two   |     4
 Three |     5
(4 rows)

explain verbose select b,count(b) from xc_groupby_def group by b;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 HashAggregate  (cost=1.02..1.03 rows=1 width=68)
   Output: xc_groupby_def.b, count((count(xc_groupby_def.b)))
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: xc_groupby_def.b, (count(xc_groupby_def.b))
         ->  Data Node Scan (Node Count [1])  (cost=0.00..1.01 rows=1000 width=68)
               Output: xc_groupby_def.b, count(xc_groupby_def.b)
(6 rows)

select count(*) from xc_groupby_def where b is null group by b;
 count 
-------
     3
(1 row)

explain verbose select count(*) from xc_groupby_def where b is null group by b;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 HashAggregate  (cost=1.02..1.03 rows=1 width=68)
   Output: pg_catalog.count(*), xc_groupby_def.b
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: (count(*)), xc_groupby_def.b
         ->  Data Node Scan (Node Count [1])  (cost=0.00..1.01 rows=1000 width=68)
               Output: count(*), xc_groupby_def.b
(6 rows)

create table xc_groupby_g(a int, b float, c numeric) distribute by replication;
insert into xc_groupby_g values(1,2.1,3.2);
insert into xc_groupby_g values(1,2.1,3.2);
insert into xc_groupby_g values(2,2.3,5.2);
select sum(a) from xc_groupby_g group by a;
 sum 
-----
   2
   2
(2 rows)

explain verbose select sum(a) from xc_groupby_g group by a;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 HashAggregate  (cost=1.02..1.03 rows=1 width=4)
   Output: pg_catalog.sum((sum(xc_groupby_g.a))), xc_groupby_g.a
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: (sum(xc_groupby_g.a)), xc_groupby_g.a
         ->  Data Node Scan (Node Count [1])  (cost=0.00..1.01 rows=1000 width=4)
               Output: sum(xc_groupby_g.a), xc_groupby_g.a
(6 rows)

select sum(b) from xc_groupby_g group by b;
 sum 
-----
 2.3
 4.2
(2 rows)

explain verbose select sum(b) from xc_groupby_g group by b;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 HashAggregate  (cost=1.02..1.03 rows=1 width=8)
   Output: sum((sum(xc_groupby_g.b))), xc_groupby_g.b
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: (sum(xc_groupby_g.b)), xc_groupby_g.b
         ->  Data Node Scan (Node Count [1])  (cost=0.00..1.01 rows=1000 width=8)
               Output: sum(xc_groupby_g.b), xc_groupby_g.b
(6 rows)

select sum(c) from xc_groupby_g group by b;
 sum 
-----
 5.2
 6.4
(2 rows)

explain verbose select sum(c) from xc_groupby_g group by b;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 HashAggregate  (cost=1.02..1.03 rows=1 width=40)
   Output: sum((sum(xc_groupby_g.c))), xc_groupby_g.b
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: (sum(xc_groupby_g.c)), xc_groupby_g.b
         ->  Data Node Scan (Node Count [1])  (cost=0.00..1.01 rows=1000 width=40)
               Output: sum(xc_groupby_g.c), xc_groupby_g.b
(6 rows)

select avg(a) from xc_groupby_g group by b;
          avg           
------------------------
     2.0000000000000000
 1.00000000000000000000
(2 rows)

explain verbose select avg(a) from xc_groupby_g group by b;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 HashAggregate  (cost=1.02..1.03 rows=1 width=12)
   Output: pg_catalog.avg((avg(xc_groupby_g.a))), xc_groupby_g.b
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: (avg(xc_groupby_g.a)), xc_groupby_g.b
         ->  Data Node Scan (Node Count [1])  (cost=0.00..1.01 rows=1000 width=12)
               Output: avg(xc_groupby_g.a), xc_groupby_g.b
(6 rows)

select avg(b) from xc_groupby_g group by c;
 avg 
-----
 2.3
 2.1
(2 rows)

explain verbose select avg(b) from xc_groupby_g group by c;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 HashAggregate  (cost=1.02..1.03 rows=1 width=40)
   Output: pg_catalog.avg((avg(xc_groupby_g.b))), xc_groupby_g.c
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: (avg(xc_groupby_g.b)), xc_groupby_g.c
         ->  Data Node Scan (Node Count [1])  (cost=0.00..1.01 rows=1000 width=40)
               Output: avg(xc_groupby_g.b), xc_groupby_g.c
(6 rows)

select avg(c) from xc_groupby_g group by c;
        avg         
--------------------
 5.2000000000000000
 3.2000000000000000
(2 rows)

explain verbose select avg(c) from xc_groupby_g group by c;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 HashAggregate  (cost=1.02..1.03 rows=1 width=32)
   Output: pg_catalog.avg((avg(xc_groupby_g.c))), xc_groupby_g.c
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: (avg(xc_groupby_g.c)), xc_groupby_g.c
         ->  Data Node Scan (Node Count [1])  (cost=0.00..1.01 rows=1000 width=32)
               Output: avg(xc_groupby_g.c), xc_groupby_g.c
(6 rows)

drop table xc_groupby_def;
drop table xc_groupby_g;
reset enable_hashagg;
-- Combination 3 enable_hashagg off and distributed tables
set enable_hashagg to off;
-- create required tables and fill them with data
create table xc_groupby_tab1 (val int, val2 int);
create table xc_groupby_tab2 (val int, val2 int);
insert into xc_groupby_tab1 values (1, 1), (2, 1), (3, 1), (2, 2), (6, 2), (4, 3), (1, 3), (6, 3);
insert into xc_groupby_tab2 values (1, 1), (4, 1), (8, 1), (2, 4), (9, 4), (3, 4), (4, 2), (5, 2), (3, 2);
select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_groupby_tab1 group by val2;
 count | sum |        avg         |     ?column?     | val2 
-------+-----+--------------------+------------------+------
     3 |   6 | 2.0000000000000000 |                2 |    1
     2 |   8 | 4.0000000000000000 |                4 |    2
     3 |  11 | 3.6666666666666667 | 3.66666666666667 |    3
(3 rows)

explain verbose select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_groupby_tab1 group by val2;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 GroupAggregate  (cost=1.02..1.06 rows=1 width=8)
   Output: count(*), sum(val), avg(val), ((sum(val))::double precision / (count(*))::double precision), val2
   ->  Sort  (cost=1.02..1.03 rows=1 width=8)
         Output: val, val2
         Sort Key: xc_groupby_tab1.val2
         ->  Result  (cost=0.00..1.01 rows=1 width=8)
               Output: val, val2
               ->  Materialize  (cost=0.00..1.01 rows=1 width=8)
                     Output: val, val2
                     ->  Data Node Scan (Node Count [2])  (cost=0.00..1.01 rows=1000 width=8)
                           Output: val, val2
(11 rows)

-- joins and group by
select count(*), sum(xc_groupby_tab1.val * xc_groupby_tab2.val), avg(xc_groupby_tab1.val*xc_groupby_tab2.val), sum(xc_groupby_tab1.val*xc_groupby_tab2.val)::float8/count(*), xc_groupby_tab1.val2, xc_groupby_tab2.val2 from xc_groupby_tab1 full outer join xc_groupby_tab2 on xc_groupby_tab1.val2 = xc_groupby_tab2.val2 group by xc_groupby_tab1.val2, xc_groupby_tab2.val2;
 count | sum |         avg         |     ?column?     | val2 | val2 
-------+-----+---------------------+------------------+------+------
     9 |  78 |  8.6666666666666667 | 8.66666666666667 |    1 |    1
     6 |  96 | 16.0000000000000000 |               16 |    2 |    2
     3 |     |                     |                  |    3 |     
     3 |     |                     |                  |      |    4
(4 rows)

explain verbose select count(*), sum(xc_groupby_tab1.val * xc_groupby_tab2.val), avg(xc_groupby_tab1.val*xc_groupby_tab2.val), sum(xc_groupby_tab1.val*xc_groupby_tab2.val)::float8/count(*), xc_groupby_tab1.val2, xc_groupby_tab2.val2 from xc_groupby_tab1 full outer join xc_groupby_tab2 on xc_groupby_tab1.val2 = xc_groupby_tab2.val2 group by xc_groupby_tab1.val2, xc_groupby_tab2.val2;
                                                                                                                                QUERY PLAN                                                                                                                                 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate  (cost=2.07..2.12 rows=1 width=16)
   Output: count(*), sum((xc_groupby_tab1.val * xc_groupby_tab2.val)), avg((xc_groupby_tab1.val * xc_groupby_tab2.val)), ((sum((xc_groupby_tab1.val * xc_groupby_tab2.val)))::double precision / (count(*))::double precision), xc_groupby_tab1.val2, xc_groupby_tab2.val2
   ->  Sort  (cost=2.07..2.07 rows=1 width=16)
         Output: xc_groupby_tab1.val, xc_groupby_tab2.val, xc_groupby_tab1.val2, xc_groupby_tab2.val2
         Sort Key: xc_groupby_tab1.val2, xc_groupby_tab2.val2
         ->  Hash Full Join  (cost=1.03..2.06 rows=1 width=16)
               Output: xc_groupby_tab1.val, xc_groupby_tab2.val, xc_groupby_tab1.val2, xc_groupby_tab2.val2
               Hash Cond: (xc_groupby_tab1.val2 = xc_groupby_tab2.val2)
               ->  Materialize  (cost=0.00..1.01 rows=1 width=8)
                     Output: xc_groupby_tab1.val, xc_groupby_tab1.val2
                     ->  Data Node Scan (Node Count [2]) on xc_groupby_tab1  (cost=0.00..1.01 rows=1000 width=8)
                           Output: xc_groupby_tab1.val, xc_groupby_tab1.val2
               ->  Hash  (cost=1.01..1.01 rows=1 width=8)
                     Output: xc_groupby_tab2.val, xc_groupby_tab2.val2
                     ->  Materialize  (cost=0.00..1.01 rows=1 width=8)
                           Output: xc_groupby_tab2.val, xc_groupby_tab2.val2
                           ->  Data Node Scan (Node Count [2]) on xc_groupby_tab2  (cost=0.00..1.01 rows=1000 width=8)
                                 Output: xc_groupby_tab2.val, xc_groupby_tab2.val2
(18 rows)

-- aggregates over aggregates
select sum(y) from (select sum(val) y, val2%2 x from xc_groupby_tab1 group by val2) q1 group by x;
 sum 
-----
   8
  17
(2 rows)

explain verbose select sum(y) from (select sum(val) y, val2%2 x from xc_groupby_tab1 group by val2) q1 group by x;
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 GroupAggregate  (cost=1.07..1.09 rows=1 width=12)
   Output: sum(q1.y), q1.x
   ->  Sort  (cost=1.07..1.07 rows=1 width=12)
         Output: q1.y, q1.x
         Sort Key: q1.x
         ->  Subquery Scan on q1  (cost=1.02..1.06 rows=1 width=12)
               Output: q1.y, q1.x
               ->  GroupAggregate  (cost=1.02..1.05 rows=1 width=8)
                     Output: pg_catalog.sum((sum(xc_groupby_tab1.val))), ((xc_groupby_tab1.val2 % 2)), xc_groupby_tab1.val2
                     ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
                           Output: (sum(xc_groupby_tab1.val)), ((xc_groupby_tab1.val2 % 2)), xc_groupby_tab1.val2
                           ->  Data Node Scan (Node Count [2])  (cost=0.00..1.01 rows=1000 width=8)
                                 Output: sum(xc_groupby_tab1.val), (xc_groupby_tab1.val2 % 2), xc_groupby_tab1.val2
(13 rows)

-- group by without aggregate
select val2 from xc_groupby_tab1 group by val2;
 val2 
------
    1
    2
    3
(3 rows)

explain verbose select val2 from xc_groupby_tab1 group by val2;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Group  (cost=1.02..1.03 rows=1 width=4)
   Output: xc_groupby_tab1.val2
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: xc_groupby_tab1.val2
         ->  Data Node Scan (Node Count [2])  (cost=0.00..1.01 rows=1000 width=4)
               Output: xc_groupby_tab1.val2
(6 rows)

select val + val2 from xc_groupby_tab1 group by val + val2;
 ?column? 
----------
        2
        3
        4
        7
        8
        9
(6 rows)

explain verbose select val + val2 from xc_groupby_tab1 group by val + val2;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Group  (cost=1.03..1.04 rows=1 width=8)
   Output: ((xc_groupby_tab1.val + xc_groupby_tab1.val2))
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: ((xc_groupby_tab1.val + xc_groupby_tab1.val2))
         ->  Data Node Scan (Node Count [2])  (cost=0.00..1.01 rows=1000 width=8)
               Output: (xc_groupby_tab1.val + xc_groupby_tab1.val2)
(6 rows)

select val + val2, val, val2 from xc_groupby_tab1 group by val, val2;
 ?column? | val | val2 
----------+-----+------
        2 |   1 |    1
        4 |   1 |    3
        3 |   2 |    1
        4 |   2 |    2
        4 |   3 |    1
        7 |   4 |    3
        8 |   6 |    2
        9 |   6 |    3
(8 rows)

explain verbose select val + val2, val, val2 from xc_groupby_tab1 group by val, val2;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Group  (cost=1.02..1.04 rows=1 width=8)
   Output: ((xc_groupby_tab1.val + xc_groupby_tab1.val2)), xc_groupby_tab1.val, xc_groupby_tab1.val2
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: ((xc_groupby_tab1.val + xc_groupby_tab1.val2)), xc_groupby_tab1.val, xc_groupby_tab1.val2
         ->  Data Node Scan (Node Count [2])  (cost=0.00..1.01 rows=1000 width=8)
               Output: (xc_groupby_tab1.val + xc_groupby_tab1.val2), xc_groupby_tab1.val, xc_groupby_tab1.val2
(6 rows)

select xc_groupby_tab1.val + xc_groupby_tab2.val2, xc_groupby_tab1.val, xc_groupby_tab2.val2 from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val, xc_groupby_tab2.val2;
 ?column? | val | val2 
----------+-----+------
        2 |   1 |    1
        6 |   2 |    4
        5 |   3 |    2
        7 |   3 |    4
        5 |   4 |    1
        6 |   4 |    2
(6 rows)

explain verbose select xc_groupby_tab1.val + xc_groupby_tab2.val2, xc_groupby_tab1.val, xc_groupby_tab2.val2 from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val, xc_groupby_tab2.val2;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Group  (cost=0.01..0.02 rows=1 width=0)
   Output: ((xc_groupby_tab1.val + xc_groupby_tab2.val2)), xc_groupby_tab1.val, xc_groupby_tab2.val2
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: ((xc_groupby_tab1.val + xc_groupby_tab2.val2)), xc_groupby_tab1.val, xc_groupby_tab2.val2
         ->  Data Node Scan (Node Count [2])  (cost=0.00..1.01 rows=1 width=4)
               Output: (xc_groupby_tab1.val + xc_groupby_tab2.val2), xc_groupby_tab1.val, xc_groupby_tab2.val2
(6 rows)

select xc_groupby_tab1.val + xc_groupby_tab2.val2 from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val + xc_groupby_tab2.val2;
 ?column? 
----------
        2
        5
        6
        7
(4 rows)

explain verbose select xc_groupby_tab1.val + xc_groupby_tab2.val2 from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val + xc_groupby_tab2.val2;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Group  (cost=0.01..0.02 rows=1 width=0)
   Output: ((xc_groupby_tab1.val + xc_groupby_tab2.val2))
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: ((xc_groupby_tab1.val + xc_groupby_tab2.val2))
         ->  Data Node Scan (Node Count [2])  (cost=0.00..1.01 rows=1 width=4)
               Output: (xc_groupby_tab1.val + xc_groupby_tab2.val2)
(6 rows)

-- group by with aggregates in expression
select count(*) + sum(val) + avg(val), val2 from xc_groupby_tab1 group by val2;
      ?column?       | val2 
---------------------+------
 11.0000000000000000 |    1
 14.0000000000000000 |    2
 17.6666666666666667 |    3
(3 rows)

explain verbose select count(*) + sum(val) + avg(val), val2 from xc_groupby_tab1 group by val2;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 GroupAggregate  (cost=1.02..1.06 rows=1 width=8)
   Output: (((count(*) + sum(val)))::numeric + avg(val)), val2
   ->  Sort  (cost=1.02..1.03 rows=1 width=8)
         Output: val, val2
         Sort Key: xc_groupby_tab1.val2
         ->  Result  (cost=0.00..1.01 rows=1 width=8)
               Output: val, val2
               ->  Materialize  (cost=0.00..1.01 rows=1 width=8)
                     Output: val, val2
                     ->  Data Node Scan (Node Count [2])  (cost=0.00..1.01 rows=1000 width=8)
                           Output: val, val2
(11 rows)

-- group by with expressions in group by clause
select sum(val), avg(val), 2 * val2 from xc_groupby_tab1 group by 2 * val2;
 sum |        avg         | ?column? 
-----+--------------------+----------
   6 | 2.0000000000000000 |        2
   8 | 4.0000000000000000 |        4
  11 | 3.6666666666666667 |        6
(3 rows)

explain verbose select sum(val), avg(val), 2 * val2 from xc_groupby_tab1 group by 2 * val2;
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate  (cost=1.03..1.05 rows=1 width=8)
   Output: pg_catalog.sum((sum(xc_groupby_tab1.val))), pg_catalog.avg((avg(xc_groupby_tab1.val))), ((2 * xc_groupby_tab1.val2))
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: (sum(xc_groupby_tab1.val)), (avg(xc_groupby_tab1.val)), ((2 * xc_groupby_tab1.val2))
         ->  Data Node Scan (Node Count [2])  (cost=0.00..1.01 rows=1000 width=8)
               Output: sum(xc_groupby_tab1.val), avg(xc_groupby_tab1.val), (2 * xc_groupby_tab1.val2)
(6 rows)

drop table xc_groupby_tab1;
drop table xc_groupby_tab2;
-- some tests involving nulls, characters, float type etc.
create table xc_groupby_def(a int, b varchar(25)); 
insert into xc_groupby_def VALUES (NULL, NULL);
insert into xc_groupby_def VALUES (1, NULL);
insert into xc_groupby_def VALUES (NULL, 'One');
insert into xc_groupby_def VALUES (2, 'Two');
insert into xc_groupby_def VALUES (2, 'Two');
insert into xc_groupby_def VALUES (3, 'Three');
insert into xc_groupby_def VALUES (4, 'Three');
insert into xc_groupby_def VALUES (5, 'Three');
insert into xc_groupby_def VALUES (6, 'Two');
insert into xc_groupby_def VALUES (7, NULL);
insert into xc_groupby_def VALUES (8, 'Two');
insert into xc_groupby_def VALUES (9, 'Three');
insert into xc_groupby_def VALUES (10, 'Three');
select a,count(a) from xc_groupby_def group by a order by a;
 a  | count 
----+-------
  1 |     1
  2 |     2
  3 |     1
  4 |     1
  5 |     1
  6 |     1
  7 |     1
  8 |     1
  9 |     1
 10 |     1
    |     0
(11 rows)

explain verbose select a,count(a) from xc_groupby_def group by a order by a;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 GroupAggregate  (cost=1.02..1.04 rows=1 width=4)
   Output: a, count(a)
   ->  Sort  (cost=1.02..1.03 rows=1 width=4)
         Output: a
         Sort Key: xc_groupby_def.a
         ->  Result  (cost=0.00..1.01 rows=1 width=4)
               Output: a
               ->  Materialize  (cost=0.00..1.01 rows=1 width=4)
                     Output: a, b
                     ->  Data Node Scan (Node Count [2])  (cost=0.00..1.01 rows=1000 width=4)
                           Output: a, b
(11 rows)

select avg(a) from xc_groupby_def group by a; 
          avg           
------------------------
 1.00000000000000000000
     2.0000000000000000
     3.0000000000000000
     4.0000000000000000
     5.0000000000000000
     6.0000000000000000
     7.0000000000000000
     8.0000000000000000
     9.0000000000000000
    10.0000000000000000
                       
(11 rows)

select avg(a) from xc_groupby_def group by a;
          avg           
------------------------
 1.00000000000000000000
     2.0000000000000000
     3.0000000000000000
     4.0000000000000000
     5.0000000000000000
     6.0000000000000000
     7.0000000000000000
     8.0000000000000000
     9.0000000000000000
    10.0000000000000000
                       
(11 rows)

explain verbose select avg(a) from xc_groupby_def group by a;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 GroupAggregate  (cost=1.02..1.05 rows=1 width=4)
   Output: pg_catalog.avg((avg(xc_groupby_def.a))), xc_groupby_def.a
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: (avg(xc_groupby_def.a)), xc_groupby_def.a
         ->  Data Node Scan (Node Count [2])  (cost=0.00..1.01 rows=1000 width=4)
               Output: avg(xc_groupby_def.a), xc_groupby_def.a
(6 rows)

select avg(a) from xc_groupby_def group by b;
        avg         
--------------------
                   
 6.2000000000000000
 4.5000000000000000
 4.0000000000000000
(4 rows)

explain verbose select avg(a) from xc_groupby_def group by b;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 GroupAggregate  (cost=1.02..1.05 rows=1 width=72)
   Output: pg_catalog.avg((avg(xc_groupby_def.a))), xc_groupby_def.b
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: (avg(xc_groupby_def.a)), xc_groupby_def.b
         ->  Data Node Scan (Node Count [2])  (cost=0.00..1.01 rows=1000 width=72)
               Output: avg(xc_groupby_def.a), xc_groupby_def.b
(6 rows)

select sum(a) from xc_groupby_def group by b;
 sum 
-----
    
  31
  18
   8
(4 rows)

explain verbose select sum(a) from xc_groupby_def group by b;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 GroupAggregate  (cost=1.02..1.04 rows=1 width=72)
   Output: pg_catalog.sum((sum(xc_groupby_def.a))), xc_groupby_def.b
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: (sum(xc_groupby_def.a)), xc_groupby_def.b
         ->  Data Node Scan (Node Count [2])  (cost=0.00..1.01 rows=1000 width=72)
               Output: sum(xc_groupby_def.a), xc_groupby_def.b
(6 rows)

select count(*) from xc_groupby_def group by b;
 count 
-------
     1
     5
     4
     3
(4 rows)

explain verbose select count(*) from xc_groupby_def group by b;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 GroupAggregate  (cost=1.02..1.04 rows=1 width=68)
   Output: pg_catalog.count(*), xc_groupby_def.b
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: (count(*)), xc_groupby_def.b
         ->  Data Node Scan (Node Count [2])  (cost=0.00..1.01 rows=1000 width=68)
               Output: count(*), xc_groupby_def.b
(6 rows)

select count(*) from xc_groupby_def where a is not null group by a;
 count 
-------
     1
     2
     1
     1
     1
     1
     1
     1
     1
     1
(10 rows)

explain verbose select count(*) from xc_groupby_def where a is not null group by a;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 GroupAggregate  (cost=1.02..1.04 rows=1 width=4)
   Output: pg_catalog.count(*), xc_groupby_def.a
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: (count(*)), xc_groupby_def.a
         ->  Data Node Scan (Node Count [2])  (cost=0.00..1.01 rows=1000 width=4)
               Output: count(*), xc_groupby_def.a
(6 rows)

select b from xc_groupby_def group by b;
   b   
-------
 One
 Three
 Two
 
(4 rows)

explain verbose select b from xc_groupby_def group by b;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Group  (cost=1.02..1.03 rows=1 width=68)
   Output: xc_groupby_def.b
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: xc_groupby_def.b
         ->  Data Node Scan (Node Count [2])  (cost=0.00..1.01 rows=1000 width=68)
               Output: xc_groupby_def.b
(6 rows)

select b,count(b) from xc_groupby_def group by b;
   b   | count 
-------+-------
 One   |     1
 Three |     5
 Two   |     4
       |     0
(4 rows)

explain verbose select b,count(b) from xc_groupby_def group by b;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 GroupAggregate  (cost=1.02..1.04 rows=1 width=68)
   Output: xc_groupby_def.b, count((count(xc_groupby_def.b)))
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: xc_groupby_def.b, (count(xc_groupby_def.b))
         ->  Data Node Scan (Node Count [2])  (cost=0.00..1.01 rows=1000 width=68)
               Output: xc_groupby_def.b, count(xc_groupby_def.b)
(6 rows)

select count(*) from xc_groupby_def where b is null group by b;
 count 
-------
     3
(1 row)

explain verbose select count(*) from xc_groupby_def where b is null group by b;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 GroupAggregate  (cost=1.02..1.04 rows=1 width=68)
   Output: pg_catalog.count(*), xc_groupby_def.b
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: (count(*)), xc_groupby_def.b
         ->  Data Node Scan (Node Count [2])  (cost=0.00..1.01 rows=1000 width=68)
               Output: count(*), xc_groupby_def.b
(6 rows)

create table xc_groupby_g(a int, b float, c numeric);
insert into xc_groupby_g values(1,2.1,3.2);
insert into xc_groupby_g values(1,2.1,3.2);
insert into xc_groupby_g values(2,2.3,5.2);
select sum(a) from xc_groupby_g group by a;
 sum 
-----
   2
   2
(2 rows)

explain verbose select sum(a) from xc_groupby_g group by a;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 GroupAggregate  (cost=1.02..1.04 rows=1 width=4)
   Output: pg_catalog.sum((sum(xc_groupby_g.a))), xc_groupby_g.a
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: (sum(xc_groupby_g.a)), xc_groupby_g.a
         ->  Data Node Scan (Node Count [2])  (cost=0.00..1.01 rows=1000 width=4)
               Output: sum(xc_groupby_g.a), xc_groupby_g.a
(6 rows)

select sum(b) from xc_groupby_g group by b;
 sum 
-----
 4.2
 2.3
(2 rows)

explain verbose select sum(b) from xc_groupby_g group by b;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 GroupAggregate  (cost=1.02..1.04 rows=1 width=8)
   Output: sum((sum(xc_groupby_g.b))), xc_groupby_g.b
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: (sum(xc_groupby_g.b)), xc_groupby_g.b
         ->  Data Node Scan (Node Count [2])  (cost=0.00..1.01 rows=1000 width=8)
               Output: sum(xc_groupby_g.b), xc_groupby_g.b
(6 rows)

select sum(c) from xc_groupby_g group by b;
 sum 
-----
 6.4
 5.2
(2 rows)

explain verbose select sum(c) from xc_groupby_g group by b;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 GroupAggregate  (cost=1.02..1.04 rows=1 width=40)
   Output: sum((sum(xc_groupby_g.c))), xc_groupby_g.b
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: (sum(xc_groupby_g.c)), xc_groupby_g.b
         ->  Data Node Scan (Node Count [2])  (cost=0.00..1.01 rows=1000 width=40)
               Output: sum(xc_groupby_g.c), xc_groupby_g.b
(6 rows)

select avg(a) from xc_groupby_g group by b;
          avg           
------------------------
 1.00000000000000000000
     2.0000000000000000
(2 rows)

explain verbose select avg(a) from xc_groupby_g group by b;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 GroupAggregate  (cost=1.02..1.05 rows=1 width=12)
   Output: pg_catalog.avg((avg(xc_groupby_g.a))), xc_groupby_g.b
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: (avg(xc_groupby_g.a)), xc_groupby_g.b
         ->  Data Node Scan (Node Count [2])  (cost=0.00..1.01 rows=1000 width=12)
               Output: avg(xc_groupby_g.a), xc_groupby_g.b
(6 rows)

select avg(b) from xc_groupby_g group by c;
 avg 
-----
 2.1
 2.3
(2 rows)

explain verbose select avg(b) from xc_groupby_g group by c;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 GroupAggregate  (cost=1.02..1.05 rows=1 width=40)
   Output: pg_catalog.avg((avg(xc_groupby_g.b))), xc_groupby_g.c
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: (avg(xc_groupby_g.b)), xc_groupby_g.c
         ->  Data Node Scan (Node Count [2])  (cost=0.00..1.01 rows=1000 width=40)
               Output: avg(xc_groupby_g.b), xc_groupby_g.c
(6 rows)

select avg(c) from xc_groupby_g group by c;
        avg         
--------------------
 3.2000000000000000
 5.2000000000000000
(2 rows)

explain verbose select avg(c) from xc_groupby_g group by c;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 GroupAggregate  (cost=1.02..1.05 rows=1 width=32)
   Output: pg_catalog.avg((avg(xc_groupby_g.c))), xc_groupby_g.c
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: (avg(xc_groupby_g.c)), xc_groupby_g.c
         ->  Data Node Scan (Node Count [2])  (cost=0.00..1.01 rows=1000 width=32)
               Output: avg(xc_groupby_g.c), xc_groupby_g.c
(6 rows)

drop table xc_groupby_def;
drop table xc_groupby_g;
-- Combination 4 enable_hashagg off and replicated tables.
-- repeat the same tests for replicated tables
-- create required tables and fill them with data
create table xc_groupby_tab1 (val int, val2 int) distribute by replication;
create table xc_groupby_tab2 (val int, val2 int) distribute by replication;
insert into xc_groupby_tab1 values (1, 1), (2, 1), (3, 1), (2, 2), (6, 2), (4, 3), (1, 3), (6, 3);
insert into xc_groupby_tab2 values (1, 1), (4, 1), (8, 1), (2, 4), (9, 4), (3, 4), (4, 2), (5, 2), (3, 2);
select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_groupby_tab1 group by val2;
 count | sum |        avg         |     ?column?     | val2 
-------+-----+--------------------+------------------+------
     3 |   6 | 2.0000000000000000 |                2 |    1
     2 |   8 | 4.0000000000000000 |                4 |    2
     3 |  11 | 3.6666666666666667 | 3.66666666666667 |    3
(3 rows)

explain verbose select count(*), sum(val), avg(val), sum(val)::float8/count(*), val2 from xc_groupby_tab1 group by val2;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 GroupAggregate  (cost=1.02..1.06 rows=1 width=8)
   Output: count(*), sum(val), avg(val), ((sum(val))::double precision / (count(*))::double precision), val2
   ->  Sort  (cost=1.02..1.03 rows=1 width=8)
         Output: val, val2
         Sort Key: xc_groupby_tab1.val2
         ->  Result  (cost=0.00..1.01 rows=1 width=8)
               Output: val, val2
               ->  Materialize  (cost=0.00..1.01 rows=1 width=8)
                     Output: val, val2
                     ->  Data Node Scan (Node Count [1])  (cost=0.00..1.01 rows=1000 width=8)
                           Output: val, val2
(11 rows)

-- joins and group by
select count(*), sum(xc_groupby_tab1.val * xc_groupby_tab2.val), avg(xc_groupby_tab1.val*xc_groupby_tab2.val), sum(xc_groupby_tab1.val*xc_groupby_tab2.val)::float8/count(*), xc_groupby_tab1.val2, xc_groupby_tab2.val2 from xc_groupby_tab1 full outer join xc_groupby_tab2 on xc_groupby_tab1.val2 = xc_groupby_tab2.val2 group by xc_groupby_tab1.val2, xc_groupby_tab2.val2;
 count | sum |         avg         |     ?column?     | val2 | val2 
-------+-----+---------------------+------------------+------+------
     9 |  78 |  8.6666666666666667 | 8.66666666666667 |    1 |    1
     6 |  96 | 16.0000000000000000 |               16 |    2 |    2
     3 |     |                     |                  |    3 |     
     3 |     |                     |                  |      |    4
(4 rows)

explain verbose select count(*), sum(xc_groupby_tab1.val * xc_groupby_tab2.val), avg(xc_groupby_tab1.val*xc_groupby_tab2.val), sum(xc_groupby_tab1.val*xc_groupby_tab2.val)::float8/count(*), xc_groupby_tab1.val2, xc_groupby_tab2.val2 from xc_groupby_tab1 full outer join xc_groupby_tab2 on xc_groupby_tab1.val2 = xc_groupby_tab2.val2 group by xc_groupby_tab1.val2, xc_groupby_tab2.val2;
                                                                                                                                QUERY PLAN                                                                                                                                 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate  (cost=2.07..2.12 rows=1 width=16)
   Output: count(*), sum((xc_groupby_tab1.val * xc_groupby_tab2.val)), avg((xc_groupby_tab1.val * xc_groupby_tab2.val)), ((sum((xc_groupby_tab1.val * xc_groupby_tab2.val)))::double precision / (count(*))::double precision), xc_groupby_tab1.val2, xc_groupby_tab2.val2
   ->  Sort  (cost=2.07..2.07 rows=1 width=16)
         Output: xc_groupby_tab1.val, xc_groupby_tab2.val, xc_groupby_tab1.val2, xc_groupby_tab2.val2
         Sort Key: xc_groupby_tab1.val2, xc_groupby_tab2.val2
         ->  Hash Full Join  (cost=1.03..2.06 rows=1 width=16)
               Output: xc_groupby_tab1.val, xc_groupby_tab2.val, xc_groupby_tab1.val2, xc_groupby_tab2.val2
               Hash Cond: (xc_groupby_tab1.val2 = xc_groupby_tab2.val2)
               ->  Materialize  (cost=0.00..1.01 rows=1 width=8)
                     Output: xc_groupby_tab1.val, xc_groupby_tab1.val2
                     ->  Data Node Scan (Node Count [1]) on xc_groupby_tab1  (cost=0.00..1.01 rows=1000 width=8)
                           Output: xc_groupby_tab1.val, xc_groupby_tab1.val2
               ->  Hash  (cost=1.01..1.01 rows=1 width=8)
                     Output: xc_groupby_tab2.val, xc_groupby_tab2.val2
                     ->  Materialize  (cost=0.00..1.01 rows=1 width=8)
                           Output: xc_groupby_tab2.val, xc_groupby_tab2.val2
                           ->  Data Node Scan (Node Count [1]) on xc_groupby_tab2  (cost=0.00..1.01 rows=1000 width=8)
                                 Output: xc_groupby_tab2.val, xc_groupby_tab2.val2
(18 rows)

-- aggregates over aggregates
select sum(y) from (select sum(val) y, val2%2 x from xc_groupby_tab1 group by val2) q1 group by x;
 sum 
-----
   8
  17
(2 rows)

explain verbose select sum(y) from (select sum(val) y, val2%2 x from xc_groupby_tab1 group by val2) q1 group by x;
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 GroupAggregate  (cost=1.07..1.09 rows=1 width=12)
   Output: sum(q1.y), q1.x
   ->  Sort  (cost=1.07..1.07 rows=1 width=12)
         Output: q1.y, q1.x
         Sort Key: q1.x
         ->  Subquery Scan on q1  (cost=1.02..1.06 rows=1 width=12)
               Output: q1.y, q1.x
               ->  GroupAggregate  (cost=1.02..1.05 rows=1 width=8)
                     Output: pg_catalog.sum((sum(xc_groupby_tab1.val))), ((xc_groupby_tab1.val2 % 2)), xc_groupby_tab1.val2
                     ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
                           Output: (sum(xc_groupby_tab1.val)), ((xc_groupby_tab1.val2 % 2)), xc_groupby_tab1.val2
                           ->  Data Node Scan (Node Count [1])  (cost=0.00..1.01 rows=1000 width=8)
                                 Output: sum(xc_groupby_tab1.val), (xc_groupby_tab1.val2 % 2), xc_groupby_tab1.val2
(13 rows)

-- group by without aggregate
select val2 from xc_groupby_tab1 group by val2;
 val2 
------
    1
    2
    3
(3 rows)

explain verbose select val2 from xc_groupby_tab1 group by val2;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Group  (cost=1.02..1.03 rows=1 width=4)
   Output: xc_groupby_tab1.val2
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: xc_groupby_tab1.val2
         ->  Data Node Scan (Node Count [1])  (cost=0.00..1.01 rows=1000 width=4)
               Output: xc_groupby_tab1.val2
(6 rows)

select val + val2 from xc_groupby_tab1 group by val + val2;
 ?column? 
----------
        2
        3
        4
        7
        8
        9
(6 rows)

explain verbose select val + val2 from xc_groupby_tab1 group by val + val2;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Group  (cost=1.03..1.04 rows=1 width=8)
   Output: ((xc_groupby_tab1.val + xc_groupby_tab1.val2))
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: ((xc_groupby_tab1.val + xc_groupby_tab1.val2))
         ->  Data Node Scan (Node Count [1])  (cost=0.00..1.01 rows=1000 width=8)
               Output: (xc_groupby_tab1.val + xc_groupby_tab1.val2)
(6 rows)

select val + val2, val, val2 from xc_groupby_tab1 group by val, val2;
 ?column? | val | val2 
----------+-----+------
        2 |   1 |    1
        4 |   1 |    3
        3 |   2 |    1
        4 |   2 |    2
        4 |   3 |    1
        7 |   4 |    3
        8 |   6 |    2
        9 |   6 |    3
(8 rows)

explain verbose select val + val2, val, val2 from xc_groupby_tab1 group by val, val2;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Group  (cost=1.02..1.04 rows=1 width=8)
   Output: ((xc_groupby_tab1.val + xc_groupby_tab1.val2)), xc_groupby_tab1.val, xc_groupby_tab1.val2
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: ((xc_groupby_tab1.val + xc_groupby_tab1.val2)), xc_groupby_tab1.val, xc_groupby_tab1.val2
         ->  Data Node Scan (Node Count [1])  (cost=0.00..1.01 rows=1000 width=8)
               Output: (xc_groupby_tab1.val + xc_groupby_tab1.val2), xc_groupby_tab1.val, xc_groupby_tab1.val2
(6 rows)

select xc_groupby_tab1.val + xc_groupby_tab2.val2, xc_groupby_tab1.val, xc_groupby_tab2.val2 from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val, xc_groupby_tab2.val2;
 ?column? | val | val2 
----------+-----+------
        2 |   1 |    1
        6 |   2 |    4
        5 |   3 |    2
        7 |   3 |    4
        5 |   4 |    1
        6 |   4 |    2
(6 rows)

explain verbose select xc_groupby_tab1.val + xc_groupby_tab2.val2, xc_groupby_tab1.val, xc_groupby_tab2.val2 from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val, xc_groupby_tab2.val2;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Group  (cost=0.01..0.02 rows=1 width=0)
   Output: ((xc_groupby_tab1.val + xc_groupby_tab2.val2)), xc_groupby_tab1.val, xc_groupby_tab2.val2
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: ((xc_groupby_tab1.val + xc_groupby_tab2.val2)), xc_groupby_tab1.val, xc_groupby_tab2.val2
         ->  Data Node Scan (Node Count [1])  (cost=0.00..1.01 rows=1 width=4)
               Output: (xc_groupby_tab1.val + xc_groupby_tab2.val2), xc_groupby_tab1.val, xc_groupby_tab2.val2
(6 rows)

select xc_groupby_tab1.val + xc_groupby_tab2.val2 from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val + xc_groupby_tab2.val2;
 ?column? 
----------
        2
        5
        6
        7
(4 rows)

explain verbose select xc_groupby_tab1.val + xc_groupby_tab2.val2 from xc_groupby_tab1, xc_groupby_tab2 where xc_groupby_tab1.val = xc_groupby_tab2.val group by xc_groupby_tab1.val + xc_groupby_tab2.val2;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Group  (cost=0.01..0.02 rows=1 width=0)
   Output: ((xc_groupby_tab1.val + xc_groupby_tab2.val2))
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: ((xc_groupby_tab1.val + xc_groupby_tab2.val2))
         ->  Data Node Scan (Node Count [1])  (cost=0.00..1.01 rows=1 width=4)
               Output: (xc_groupby_tab1.val + xc_groupby_tab2.val2)
(6 rows)

-- group by with aggregates in expression
select count(*) + sum(val) + avg(val), val2 from xc_groupby_tab1 group by val2;
      ?column?       | val2 
---------------------+------
 11.0000000000000000 |    1
 14.0000000000000000 |    2
 17.6666666666666667 |    3
(3 rows)

explain verbose select count(*) + sum(val) + avg(val), val2 from xc_groupby_tab1 group by val2;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 GroupAggregate  (cost=1.02..1.06 rows=1 width=8)
   Output: (((count(*) + sum(val)))::numeric + avg(val)), val2
   ->  Sort  (cost=1.02..1.03 rows=1 width=8)
         Output: val, val2
         Sort Key: xc_groupby_tab1.val2
         ->  Result  (cost=0.00..1.01 rows=1 width=8)
               Output: val, val2
               ->  Materialize  (cost=0.00..1.01 rows=1 width=8)
                     Output: val, val2
                     ->  Data Node Scan (Node Count [1])  (cost=0.00..1.01 rows=1000 width=8)
                           Output: val, val2
(11 rows)

-- group by with expressions in group by clause
select sum(val), avg(val), 2 * val2 from xc_groupby_tab1 group by 2 * val2;
 sum |        avg         | ?column? 
-----+--------------------+----------
   6 | 2.0000000000000000 |        2
   8 | 4.0000000000000000 |        4
  11 | 3.6666666666666667 |        6
(3 rows)

explain verbose select sum(val), avg(val), 2 * val2 from xc_groupby_tab1 group by 2 * val2;
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate  (cost=1.03..1.05 rows=1 width=8)
   Output: pg_catalog.sum((sum(xc_groupby_tab1.val))), pg_catalog.avg((avg(xc_groupby_tab1.val))), ((2 * xc_groupby_tab1.val2))
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: (sum(xc_groupby_tab1.val)), (avg(xc_groupby_tab1.val)), ((2 * xc_groupby_tab1.val2))
         ->  Data Node Scan (Node Count [1])  (cost=0.00..1.01 rows=1000 width=8)
               Output: sum(xc_groupby_tab1.val), avg(xc_groupby_tab1.val), (2 * xc_groupby_tab1.val2)
(6 rows)

drop table xc_groupby_tab1;
drop table xc_groupby_tab2;
-- some tests involving nulls, characters, float type etc.
create table xc_groupby_def(a int, b varchar(25)) distribute by replication; 
insert into xc_groupby_def VALUES (NULL, NULL);
insert into xc_groupby_def VALUES (1, NULL);
insert into xc_groupby_def VALUES (NULL, 'One');
insert into xc_groupby_def VALUES (2, 'Two');
insert into xc_groupby_def VALUES (2, 'Two');
insert into xc_groupby_def VALUES (3, 'Three');
insert into xc_groupby_def VALUES (4, 'Three');
insert into xc_groupby_def VALUES (5, 'Three');
insert into xc_groupby_def VALUES (6, 'Two');
insert into xc_groupby_def VALUES (7, NULL);
insert into xc_groupby_def VALUES (8, 'Two');
insert into xc_groupby_def VALUES (9, 'Three');
insert into xc_groupby_def VALUES (10, 'Three');
select a,count(a) from xc_groupby_def group by a order by a;
 a  | count 
----+-------
  1 |     1
  2 |     2
  3 |     1
  4 |     1
  5 |     1
  6 |     1
  7 |     1
  8 |     1
  9 |     1
 10 |     1
    |     0
(11 rows)

explain verbose select a,count(a) from xc_groupby_def group by a order by a;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 GroupAggregate  (cost=1.02..1.04 rows=1 width=4)
   Output: a, count(a)
   ->  Sort  (cost=1.02..1.03 rows=1 width=4)
         Output: a
         Sort Key: xc_groupby_def.a
         ->  Result  (cost=0.00..1.01 rows=1 width=4)
               Output: a
               ->  Materialize  (cost=0.00..1.01 rows=1 width=4)
                     Output: a, b
                     ->  Data Node Scan (Node Count [1])  (cost=0.00..1.01 rows=1000 width=4)
                           Output: a, b
(11 rows)

select avg(a) from xc_groupby_def group by a; 
          avg           
------------------------
 1.00000000000000000000
     2.0000000000000000
     3.0000000000000000
     4.0000000000000000
     5.0000000000000000
     6.0000000000000000
     7.0000000000000000
     8.0000000000000000
     9.0000000000000000
    10.0000000000000000
                       
(11 rows)

explain verbose select avg(a) from xc_groupby_def group by a; 
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 GroupAggregate  (cost=1.02..1.05 rows=1 width=4)
   Output: pg_catalog.avg((avg(xc_groupby_def.a))), xc_groupby_def.a
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: (avg(xc_groupby_def.a)), xc_groupby_def.a
         ->  Data Node Scan (Node Count [1])  (cost=0.00..1.01 rows=1000 width=4)
               Output: avg(xc_groupby_def.a), xc_groupby_def.a
(6 rows)

select avg(a) from xc_groupby_def group by a;
          avg           
------------------------
 1.00000000000000000000
     2.0000000000000000
     3.0000000000000000
     4.0000000000000000
     5.0000000000000000
     6.0000000000000000
     7.0000000000000000
     8.0000000000000000
     9.0000000000000000
    10.0000000000000000
                       
(11 rows)

explain verbose select avg(a) from xc_groupby_def group by a;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 GroupAggregate  (cost=1.02..1.05 rows=1 width=4)
   Output: pg_catalog.avg((avg(xc_groupby_def.a))), xc_groupby_def.a
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: (avg(xc_groupby_def.a)), xc_groupby_def.a
         ->  Data Node Scan (Node Count [1])  (cost=0.00..1.01 rows=1000 width=4)
               Output: avg(xc_groupby_def.a), xc_groupby_def.a
(6 rows)

select avg(a) from xc_groupby_def group by b;
        avg         
--------------------
                   
 6.2000000000000000
 4.5000000000000000
 4.0000000000000000
(4 rows)

explain verbose select avg(a) from xc_groupby_def group by b;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 GroupAggregate  (cost=1.02..1.05 rows=1 width=72)
   Output: pg_catalog.avg((avg(xc_groupby_def.a))), xc_groupby_def.b
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: (avg(xc_groupby_def.a)), xc_groupby_def.b
         ->  Data Node Scan (Node Count [1])  (cost=0.00..1.01 rows=1000 width=72)
               Output: avg(xc_groupby_def.a), xc_groupby_def.b
(6 rows)

select sum(a) from xc_groupby_def group by b;
 sum 
-----
    
  31
  18
   8
(4 rows)

explain verbose select sum(a) from xc_groupby_def group by b;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 GroupAggregate  (cost=1.02..1.04 rows=1 width=72)
   Output: pg_catalog.sum((sum(xc_groupby_def.a))), xc_groupby_def.b
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: (sum(xc_groupby_def.a)), xc_groupby_def.b
         ->  Data Node Scan (Node Count [1])  (cost=0.00..1.01 rows=1000 width=72)
               Output: sum(xc_groupby_def.a), xc_groupby_def.b
(6 rows)

select count(*) from xc_groupby_def group by b;
 count 
-------
     1
     5
     4
     3
(4 rows)

explain verbose select count(*) from xc_groupby_def group by b;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 GroupAggregate  (cost=1.02..1.04 rows=1 width=68)
   Output: pg_catalog.count(*), xc_groupby_def.b
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: (count(*)), xc_groupby_def.b
         ->  Data Node Scan (Node Count [1])  (cost=0.00..1.01 rows=1000 width=68)
               Output: count(*), xc_groupby_def.b
(6 rows)

select count(*) from xc_groupby_def where a is not null group by a;
 count 
-------
     1
     2
     1
     1
     1
     1
     1
     1
     1
     1
(10 rows)

explain verbose select count(*) from xc_groupby_def where a is not null group by a;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 GroupAggregate  (cost=1.02..1.04 rows=1 width=4)
   Output: pg_catalog.count(*), xc_groupby_def.a
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: (count(*)), xc_groupby_def.a
         ->  Data Node Scan (Node Count [1])  (cost=0.00..1.01 rows=1000 width=4)
               Output: count(*), xc_groupby_def.a
(6 rows)

select b from xc_groupby_def group by b;
   b   
-------
 One
 Three
 Two
 
(4 rows)

explain verbose select b from xc_groupby_def group by b;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Group  (cost=1.02..1.03 rows=1 width=68)
   Output: xc_groupby_def.b
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: xc_groupby_def.b
         ->  Data Node Scan (Node Count [1])  (cost=0.00..1.01 rows=1000 width=68)
               Output: xc_groupby_def.b
(6 rows)

select b,count(b) from xc_groupby_def group by b;
   b   | count 
-------+-------
 One   |     1
 Three |     5
 Two   |     4
       |     0
(4 rows)

explain verbose select b,count(b) from xc_groupby_def group by b;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 GroupAggregate  (cost=1.02..1.04 rows=1 width=68)
   Output: xc_groupby_def.b, count((count(xc_groupby_def.b)))
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: xc_groupby_def.b, (count(xc_groupby_def.b))
         ->  Data Node Scan (Node Count [1])  (cost=0.00..1.01 rows=1000 width=68)
               Output: xc_groupby_def.b, count(xc_groupby_def.b)
(6 rows)

select count(*) from xc_groupby_def where b is null group by b;
 count 
-------
     3
(1 row)

explain verbose select count(*) from xc_groupby_def where b is null group by b;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 GroupAggregate  (cost=1.02..1.04 rows=1 width=68)
   Output: pg_catalog.count(*), xc_groupby_def.b
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: (count(*)), xc_groupby_def.b
         ->  Data Node Scan (Node Count [1])  (cost=0.00..1.01 rows=1000 width=68)
               Output: count(*), xc_groupby_def.b
(6 rows)

create table xc_groupby_g(a int, b float, c numeric) distribute by replication;
insert into xc_groupby_g values(1,2.1,3.2);
insert into xc_groupby_g values(1,2.1,3.2);
insert into xc_groupby_g values(2,2.3,5.2);
select sum(a) from xc_groupby_g group by a;
 sum 
-----
   2
   2
(2 rows)

explain verbose select sum(a) from xc_groupby_g group by a;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 GroupAggregate  (cost=1.02..1.04 rows=1 width=4)
   Output: pg_catalog.sum((sum(xc_groupby_g.a))), xc_groupby_g.a
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: (sum(xc_groupby_g.a)), xc_groupby_g.a
         ->  Data Node Scan (Node Count [1])  (cost=0.00..1.01 rows=1000 width=4)
               Output: sum(xc_groupby_g.a), xc_groupby_g.a
(6 rows)

select sum(b) from xc_groupby_g group by b;
 sum 
-----
 4.2
 2.3
(2 rows)

explain verbose select sum(b) from xc_groupby_g group by b;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 GroupAggregate  (cost=1.02..1.04 rows=1 width=8)
   Output: sum((sum(xc_groupby_g.b))), xc_groupby_g.b
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: (sum(xc_groupby_g.b)), xc_groupby_g.b
         ->  Data Node Scan (Node Count [1])  (cost=0.00..1.01 rows=1000 width=8)
               Output: sum(xc_groupby_g.b), xc_groupby_g.b
(6 rows)

select sum(c) from xc_groupby_g group by b;
 sum 
-----
 6.4
 5.2
(2 rows)

explain verbose select sum(c) from xc_groupby_g group by b;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 GroupAggregate  (cost=1.02..1.04 rows=1 width=40)
   Output: sum((sum(xc_groupby_g.c))), xc_groupby_g.b
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: (sum(xc_groupby_g.c)), xc_groupby_g.b
         ->  Data Node Scan (Node Count [1])  (cost=0.00..1.01 rows=1000 width=40)
               Output: sum(xc_groupby_g.c), xc_groupby_g.b
(6 rows)

select avg(a) from xc_groupby_g group by b;
          avg           
------------------------
 1.00000000000000000000
     2.0000000000000000
(2 rows)

explain verbose select avg(a) from xc_groupby_g group by b;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 GroupAggregate  (cost=1.02..1.05 rows=1 width=12)
   Output: pg_catalog.avg((avg(xc_groupby_g.a))), xc_groupby_g.b
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: (avg(xc_groupby_g.a)), xc_groupby_g.b
         ->  Data Node Scan (Node Count [1])  (cost=0.00..1.01 rows=1000 width=12)
               Output: avg(xc_groupby_g.a), xc_groupby_g.b
(6 rows)

select avg(b) from xc_groupby_g group by c;
 avg 
-----
 2.1
 2.3
(2 rows)

explain verbose select avg(b) from xc_groupby_g group by c;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 GroupAggregate  (cost=1.02..1.05 rows=1 width=40)
   Output: pg_catalog.avg((avg(xc_groupby_g.b))), xc_groupby_g.c
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: (avg(xc_groupby_g.b)), xc_groupby_g.c
         ->  Data Node Scan (Node Count [1])  (cost=0.00..1.01 rows=1000 width=40)
               Output: avg(xc_groupby_g.b), xc_groupby_g.c
(6 rows)

select avg(c) from xc_groupby_g group by c;
        avg         
--------------------
 3.2000000000000000
 5.2000000000000000
(2 rows)

explain verbose select avg(c) from xc_groupby_g group by c;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 GroupAggregate  (cost=1.02..1.05 rows=1 width=32)
   Output: pg_catalog.avg((avg(xc_groupby_g.c))), xc_groupby_g.c
   ->  Materialize  (cost=0.00..0.00 rows=0 width=0)
         Output: (avg(xc_groupby_g.c)), xc_groupby_g.c
         ->  Data Node Scan (Node Count [1])  (cost=0.00..1.01 rows=1000 width=32)
               Output: avg(xc_groupby_g.c), xc_groupby_g.c
(6 rows)

drop table xc_groupby_def;
drop table xc_groupby_g;
reset enable_hashagg;
